@page "/"
@using YachtLogHoursCalculator.Calculator
@using YachtLogHoursCalculator.Services
@inject StateService StateService
@implements IDisposable
@inject IDialogService DialogService
@using MudBlazor

<PageTitle>Kalkulator godzin</PageTitle>

<MudContainer Style="width: 100%; height: 100%; padding: 1rem">
    <MudGrid>
        <MudItem xs=12>
            <MudCard>
                <MudCardContent>
                    <MudStack Row="true">
                        <DayNavigator
                            CurrentDay="@StateService.CurrentDayNumber"
                            TotalDays="@StateService.Days.Count"
                            OnPreviousDay="@ViewPreviousDay"
                            OnNextDay="@ViewNextDay"/>
                        <MudSpacer/>
                        <MudButton
                            Color="Color.Error"
                            Variant="Variant.Filled"
                            OnClick="OnCloseLogClick"
                            Class="mr-3">
                            Zakończ dziennik
                        </MudButton>
                    </MudStack>
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem xs=12>
            <LogItems entries="@StateService.CurrentDay.Entries" entriesChanged="@EntriesChanged"/>
        </MudItem>
        <MudItem xs=12>
            <LogItemAdd entries="@StateService.CurrentDay.Entries" entriesChanged="@EntriesChanged"/>
        </MudItem>
        <MudItem xs=12>
            <LogSummary PreviousDay="@StateService.CurrentDay.PreviousDay" Entries="@StateService.CurrentDay.Entries"/>
        </MudItem>
        <MudItem xs=12>
            <MudSpacer/>
            <MudButton Class="object-right" OnClick="() => OpenNewDay()" Color="Color.Primary" Variant="Variant.Filled">
                Następny dzień
            </MudButton>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    
    private async Task OnCloseLogClick()
    {
        bool? result = await DialogService.ShowMessageBox(
            "Potwierdzenie",
            "Czy na pewno chcesz zakończyć dziennik? Spowoduje to usunięcie wszystkich wprowadzonych danych.",
            yesText: "Tak, zamknij dziennik",
            cancelText: "Anuluj"
        );

        if (result == true)
        {
            await StateService.ResetStateAsync();
        }
        StateHasChanged();
    } 
    
    private async Task OpenNewDay()
    {
        var entries = StateService.CurrentDay.Entries;
        bool isEmptyDay = entries.Count == 0  || (entries.Count == 1 && entries.First().StartTime == TimeSpan.Zero);

        if (isEmptyDay)
        {
            bool? result = await DialogService.ShowMessageBox(
                "Potwierdzenie",
                "Czy pewno dzisiaj nic się nie działo? Nie dodano wpisów na dzisaj.",
                yesText: "Tak, otwórz nowy dzień",
                cancelText: "Anuluj"
            );

            if (result != true)
            {
                return;
            }
        }
        
        StateService.OpenNewDay();
        await StateService.SaveStateAsync();
    }

    public void ViewNextDay()
    {
        StateService.ViewNextDay();
        _ = StateService.SaveStateAsync();
        StateHasChanged();
    }
    
    public void ViewPreviousDay()
    {
        StateService.ViewPreviousDay();
        _ = StateService.SaveStateAsync();
        StateHasChanged();
    }

    public async Task EntriesChanged(List<LogEntry> entries)
    {
        await StateService.SaveStateAsync();
        StateHasChanged();
    }

    public void Dispose()
    {
        // Ensure state is saved when component is disposed
        _ = StateService.SaveStateAsync();
    }
}
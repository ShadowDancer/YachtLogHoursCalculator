@using Microsoft.Extensions.Logging.Abstractions
@using YachtLogHoursCalculator.Calculator;
@inject ISnackbar Snackbar


<MudCard>
    <MudCardHeader>
        <MudStack>
            <MudText Typo="Typo.h6">Dodaj wpis</MudText>
            <MudText Typo="Typo.subtitle2" Color="Color.Info" Class="d-flex align-center">
                <MudIcon Size="Size.Small" Icon="@Icons.Material.Outlined.Info"/> Przytrzymaj i przeciągnij wskazówkę aby precyzyjnie wybrać godzinę
            </MudText>
            @if (!IsLastDay)
            {
                <MudText Color="Color.Warning" po="Typo.h6" Class="d-flex align-center">
                    <MudIcon Icon="@Icons.Material.Filled.Warning"/> Edytujesz historyczne dane
                </MudText>
            }
        </MudStack>
    </MudCardHeader>
    <MudCardContent>
        <MudStack Class="pa-5">
            <MudTimePicker Label="Czas wpisu" TimeFormat="HHmm" AutoClose="true" @bind-Time:get=SelectedTime @bind-Time:set=SelectedTimeSet />
            <MudButtonGroup Color="Color.Primary" Variant="Variant.Filled" DropShadow="false">
                @foreach (var type in new [] { EntryType.Moored, EntryType.Sail, EntryType.Engine })
                {
                    <MudButton OnClick="() => Add(type)">@type.ToDisplayName()</MudButton>
                }
            </MudButtonGroup>
        </MudStack>
    </MudCardContent>
</MudCard>

@code {

    [Parameter, EditorRequired]
    public List<LogEntry> Entries { get; set; } = new();

    [Parameter, EditorRequired]
    public EventCallback<List<LogEntry>> EntriesChanged { get; set; }

    [Parameter, EditorRequired]
    public bool IsLastDay { get; set; }
    
    protected override void OnInitialized()
    {
        SelectedTimeSet(null);
        base.OnInitialized();
    }

    public void Add(EntryType name)
    {
        var value = SelectedTime!.Value;
        var existingEntry = Entries.FirstOrDefault(n => n.StartTime == value);
        if (existingEntry != null)
        {
            Entries[Entries.IndexOf(existingEntry)] = new LogEntry(value, name);
            EntriesChanged.InvokeAsync(Entries);
            return;
        }

        Entries.Add(new LogEntry(value, name));

        Entries.Sort((a, b) => a.StartTime.CompareTo(b.StartTime));

        var newTime = Entries.Max(n => n.StartTime);
        SelectedTimeSet(newTime);

        EntriesChanged.InvokeAsync(Entries);
    }

    public void SelectedTimeSet(TimeSpan? newValue)
    {
        if (newValue == null)
        {
            if (Entries.Count == 0)
            {
                SelectedTime = TimeSpan.Zero;
                StateHasChanged();
            }
            else
            {
                SelectedTime = Entries.Max(n => n.StartTime);
                StateHasChanged();
            }
        }
        else
        {
            if (SelectedTime == newValue)
            {
                return;
            }
            SelectedTime = newValue;
            StateHasChanged();
        }
    }

    private TimeSpan? SelectedTime { get; set; } = TimeSpan.Zero;

}

@using YachtLogHoursCalculator.Calculator

<MudCard>
    <MudCardHeader>
        <MudText Typo="Typo.h6">Wpisy w dzienniku</MudText>
    </MudCardHeader>
    <MudCardContent>
        <MudTable Items="@entries" Dense=true Striped=true Bordered=true Breakpoint="Breakpoint.None">
            <ColGroup>
                <col />
                <col />
                <col style="width: 10%;" />
            </ColGroup>
            <HeaderContent>
                <MudTh>Godzina</MudTh>
                <MudTh>Rodzaj</MudTh>
                <MudTh>Usuń</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.StartTime.ToString("hhmm")</MudTd>
                <MudTd>@context.Type.ToDisplayName()</MudTd>
                <MudTd><MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="() => Remove(context)" /></MudTd>
            </RowTemplate>
        </MudTable>

        <MudStack Row="true" Class="ma-5">
        @if (entries.Count == 0)
        {
            if (CurrentDay == 1)
            {
                <MudIcon Color="Color.Info" Icon="@Icons.Material.Filled.Info"/>
                <MudText Color="Color.Info">Wybierz godzinę zaokrętowania</MudText>
            }
            else
            {
                <MudIcon Color="Color.Warning" Icon="@Icons.Material.Filled.Error"/>
                <MudText Color="Color.Warning">Usunięto wpis dla godziny 0000, godziny nie będą liczone poprawnie</MudText>
            }
        }
        </MudStack>
    </MudCardContent>
</MudCard>

@code {
    [Parameter]
    public List<LogEntry> entries { get; set; } = new();

    [Parameter]
    public EventCallback<List<LogEntry>> entriesChanged { get; set; }
    
    [Parameter]
    public int CurrentDay { get; set; } = 1;

    public void Remove(LogEntry entry)
    {
        entries.Remove(entry);
        entriesChanged.InvokeAsync(entries);
    }
}

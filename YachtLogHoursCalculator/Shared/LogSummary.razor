@using YachtLogHoursCalculator.Calculator

<MudCard>
    <MudCardHeader>
        <MudText Typo="Typo.h6">Podsumowanie</MudText>
    </MudCardHeader>
    <MudCardContent>
        <MudSimpleTable Bordered="true" Dense="true">

            <thead>
                <tr>
                    <td></td>

                    @foreach (var type in LogEntry.Types)
                    {
                        <td>@type</td>
                    }
                    <td>Razem</td>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>Z poprzedniej doby</td>
                    @foreach (var type in LogEntry.Types)
                    {
                        <td>
                            <MudTextField T=string TextChanged="(string s) => SetPreviousDay(s, type)" Text=@GetPreviousDay(type) DisableUnderLine=true Style="text-align: right" />
                        </td>
                    }
                    <td>@Format(SumTimeSpans(previousDay.Values))</td>
                </tr>
                <tr>
                    <td>Bieżąca doba</td>
                    @foreach (var type in LogEntry.Types)
                    {

                        <td style="text-align:right">
                            @if (summary.TryGetValue(type, out var timeSpan))
                            {
                                <span>@Format(timeSpan)</span>
                            }
                        </td>
                    }
                    <td>@Format(SumTimeSpans(summary.Values))</td>
                </tr>
                <tr>
                    <td>Do przeniesienia</td>
                    @foreach (var type in LogEntry.Types)
                    {
                        var totalTime = previousDay.GetValueOrDefault(type) + summary.GetValueOrDefault(type);

                        <td style="text-align:right">@(Format(totalTime))</td>
                    }
                    <td>@Format(SumTimeSpans(previousDay.Values.Concat(summary.Values)))</td>
                </tr>
            </tbody>
        </MudSimpleTable>

    </MudCardContent>
</MudCard>


@code {
    [Parameter]
    public List<LogEntry> entries { get; set; } = new List<LogEntry>();

    [Parameter]
    public Dictionary<string, TimeSpan> previousDay { get; set; } = new Dictionary<string, TimeSpan>();

    public Dictionary<string, TimeSpan> summary { get; set; } = new Dictionary<string, TimeSpan>();

    public string GetPreviousDay(string type)
    {
        if (previousDay.ContainsKey(type))
        {
            return Format(previousDay[type]);
        }

        return Format(TimeSpan.Zero);
    }

    public void SetPreviousDay(string newValue, string type)
    {
        string value = newValue;
        TimeSpan parsedValue;

        if (string.IsNullOrWhiteSpace(value))
        {
            return;
        }

        if (!value.All(n => char.IsDigit(n) || n == ':'))
        {
            return;
        }

        int hours = 0;
        int minutes = 0;

        if (value.Contains(":"))
        {
            string[] split = value.Split(":");

            if (split.Length < 2 || !int.TryParse(split[0], out hours))
            {
                return;
            }

            if (!int.TryParse(split[1], out minutes))
            {
                return;
            }
        }
        else
        {
            if (value.Length != 4)
            {
                return;
            }

            hours = int.Parse(value.Substring(0, 2));

            minutes = int.Parse(value.Substring(2, 2));

        }

        parsedValue = new TimeSpan(hours, minutes, 0);
        previousDay[type] = parsedValue;
    }

    public string Format(TimeSpan timeSpan)
    {
        return ((int)timeSpan.TotalHours) + ":" + ((int)timeSpan.Minutes).ToString().PadLeft(2, '0');
    }

    protected override void OnParametersSet()
    {
        var newSummary = HourCalculator.Calculate(entries);
        summary = newSummary;
        StateHasChanged();
        base.OnParametersSet();
    }

    private TimeSpan SumTimeSpans(IEnumerable<TimeSpan> values)
    {
        var aggregate = TimeSpan.Zero;

        foreach(var timeSpan in values)
        {
            aggregate += timeSpan;
        }

        return aggregate;
    }
}
